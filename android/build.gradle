// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext {
        buildToolsVersion = findProperty('android.buildToolsVersion') ?: '34.0.0'
        minSdkVersion = Integer.parseInt(findProperty('android.minSdkVersion') ?: '23')
        compileSdkVersion = Integer.parseInt(findProperty('android.compileSdkVersion') ?: '34')
        targetSdkVersion = Integer.parseInt(findProperty('android.targetSdkVersion') ?: '34')
        kotlinVersion = findProperty('android.kotlinVersion') ?: '1.9.23'

        ndkVersion = "26.1.10909125"
    }
    repositories {
	maven { url 'https://sdk.withpersona.com/android/releases' }
        google()
        mavenCentral()
    }
    dependencies {
        classpath('com.android.tools.build:gradle')
        classpath('com.facebook.react:react-native-gradle-plugin')
        classpath('org.jetbrains.kotlin:kotlin-gradle-plugin')
    }
}

apply plugin: "com.facebook.react.rootproject"
println "BUILD GRADLE FILE IS UPDATED"

allprojects {
    repositories {

    maven { 
        url 'https://sdk.withpersona.com/android/releases' 
        println "Checking Persona Maven repository: ${url}"
    }


        maven {
            url(new File(['node', '--print', "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim(), '../android'))
        }
        maven {
            url(new File(['node', '--print', "require.resolve('jsc-android/package.json', { paths: [require.resolve('react-native/package.json')] })"].execute(null, rootDir).text.trim(), '../dist'))
        }

        // Include standard repositories
        google()
        mavenCentral()
        maven { url 'https://www.jitpack.io' }
    }

    // Debugging: Log repositories being used
    println("Repositories being used in allprojects:")
    repositories.each { println it.name }
}

task checkPersonaRepo {
    doLast {
        def url = 'https://sdk.withpersona.com/android/releases/com/withpersona/sdk2/inquiry/2.12.8/inquiry-2.12.8.pom'
        try {
            def response = new URL(url).text
            println("Fetched Persona dependency successfully:\n$response")
        } catch (Exception e) {
            println("Failed to fetch Persona dependency:\n${e.message}")
        }
    }
}



// @generated begin expo-camera-import - expo prebuild (DO NOT MODIFY) sync-f244f4f3d8bf7229102e8f992b525b8602c74770
def expoCameraMavenPath = new File(["node", "--print", "require.resolve('expo-camera/package.json')"].execute(null, rootDir).text.trim(), "../android/maven")
allprojects { repositories { maven { url(expoCameraMavenPath) } } }
// @generated end expo-camera-import
